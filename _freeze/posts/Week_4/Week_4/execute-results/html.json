{
  "hash": "202d74d2600b430b7b7101cb620f2d20",
  "result": {
    "markdown": "---\ntitle: \"Week Four\"\nauthor: \"Kailyn Hogan\"\ndate: \"2023-06-09\"\ncategories: [Week Four]\n---\n\n\n# Week Four of DSPG\n\nThe main focus for week four on the housing team was web scraping. I did the DataCamp training for web scraping in R about a week and a half ago, which was understandable then. It could have been better when applying it in real-world scenarios. Angelina and I have done a lot of Googleing to find other examples to help us. We were tasked with scraping county housing assessor data. Independence in Buchanan County is on Vanguard. Slater in Story County, Grundy Center in Grundy County, and New Hampton in Chickasaw County are all on Beacon. We needed help figuring out how to scrape from these sites this week.\n\nI successfully scrape the categories of shoes from my favorite shoe site, Jonak, though.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'rvest' was built under R version 4.1.3\n```\n:::\n\n```{.r .cell-code}\njonak = \"https://www.jonak-paris.com/collection/shoes/sandals.html\"\ncategories <- read_html(jonak) %>% html_elements(\".categ_itm_name\") %>% html_text2()\nhead(categories)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"New in\"              \"Mules, Clogs\"        \"Sandals\"            \n[4] \"Beach sandals\"       \"Wedges, Espadrilles\" \"Babies, salomes\"    \n```\n:::\n:::\n\n\nI wanted to know if Beacon and Vanguard had anti-web scraping protections on them, and that's why Angelina and I were unsuccessful in scraping them. I found a function online called paths_allowed() in the robotstxt package that checks to see if there are protections. Both Beacon and Vanguard have protections from running the URLs through the function. Jonak doesn't, so it was easy to scrape from the site. Zillow doesn't have any protections, either.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(robotstxt)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'robotstxt' was built under R version 4.1.3\n```\n:::\n\n```{.r .cell-code}\n#TRUE = web scraping allowed, FALSE = web scraping not allowed\npaths_allowed(\"https://beacon.schneidercorp.com/Application.aspx?AppID=165&LayerID=2145&PageTypeID=3&PageID=1107&Q=1818183221\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n beacon.schneidercorp.com                      \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\npaths_allowed(\"https://buchanan.iowaassessors.com/results.php?mode=basic&history=-1&ipin=%25&idba=&ideed=&icont=&ihnum=&iaddr=&ilegal=&iacre1=&iacre2=&iphoto=0\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n buchanan.iowaassessors.com                      \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\npaths_allowed(\"https://www.zillow.com/homedetails/2925-Arbor-St-Ames-IA-50014/93961907_zpid/\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n www.zillow.com                      \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\npaths_allowed(\"https://www.jonak-paris.com/collection/shoes/sandals.html\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n www.jonak-paris.com                      \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nBecause Zillow doesn't have protections, the housing team decided to switch tactics and scrape from Zillow instead this week. I was tasked with scraping the houses in Slater, IA. I made this data frame in R with the data I scraped from Zillow.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyverse' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tibble' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'purrr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'stringr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'forcats' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'lubridate' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.2     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter()         masks stats::filter()\nx readr::guess_encoding() masks rvest::guess_encoding()\nx dplyr::lag()            masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\n#### Pulling recently SOLD houses ######\n########################################\n\nsold = \"https://www.zillow.com/slater-ia/sold/?searchQueryState=%7B%22mapBounds%22%3A%7B%22north%22%3A41.930365556704984%2C%22east%22%3A-93.55027834838869%2C%22south%22%3A41.782563414617314%2C%22west%22%3A-93.76760165161134%7D%2C%22isMapVisible%22%3Atrue%2C%22filterState%22%3A%7B%22sort%22%3A%7B%22value%22%3A%22days%22%7D%2C%22ah%22%3A%7B%22value%22%3Atrue%7D%2C%22sche%22%3A%7B%22value%22%3Afalse%7D%2C%22schm%22%3A%7B%22value%22%3Afalse%7D%2C%22schh%22%3A%7B%22value%22%3Afalse%7D%2C%22schp%22%3A%7B%22value%22%3Afalse%7D%2C%22schr%22%3A%7B%22value%22%3Afalse%7D%2C%22schc%22%3A%7B%22value%22%3Afalse%7D%2C%22schu%22%3A%7B%22value%22%3Afalse%7D%2C%22land%22%3A%7B%22value%22%3Afalse%7D%2C%22rs%22%3A%7B%22value%22%3Atrue%7D%2C%22fsba%22%3A%7B%22value%22%3Afalse%7D%2C%22fsbo%22%3A%7B%22value%22%3Afalse%7D%2C%22nc%22%3A%7B%22value%22%3Afalse%7D%2C%22cmsn%22%3A%7B%22value%22%3Afalse%7D%2C%22auc%22%3A%7B%22value%22%3Afalse%7D%2C%22fore%22%3A%7B%22value%22%3Afalse%7D%7D%2C%22isListVisible%22%3Atrue%2C%22mapZoom%22%3A12%2C%22regionSelection%22%3A%5B%7B%22regionId%22%3A20522%2C%22regionType%22%3A6%7D%5D%2C%22pagination%22%3A%7B%7D%7D\"\n# read the html in the url\nss = read_html(sold)\n\n# lists how many records there are to pull from\nhousesold <- read_html(sold) %>% html_elements(\"article\")\n\n#create a dataframe with addresses, prices, bathrooms, bedrooms, and square footage of all SOLD houses\nres_ss <- tibble(\n      address= ss %>% html_nodes(xpath = \"/html/body/div[1]/div[5]/div/div/div/div[1]/ul/li//div/div/article/div/div[1]/a/address\") %>% html_text(),\n      price = ss %>% html_nodes(xpath = '/html/body/div[1]/div[5]/div/div/div/div[1]/ul/li//div/div/article/div/div[1]/div/div/span') %>% html_text(),\n      bedrooms = ss %>% html_nodes(xpath = '/html/body/div[1]/div[5]/div/div/div/div[1]/ul/li//div/div/article/div/div[1]/div[3]/ul/li[1]/b') %>% \n        html_text(),\n      bathrooms = ss %>% html_nodes(xpath = '/html/body/div[1]/div[5]/div/div/div/div[1]/ul/li//div/div/article/div/div[1]/div[3]/ul/li[2]/b') %>% \n        html_text(),\n      sqft = ss %>% html_nodes(xpath = '/html/body/div[1]/div[5]/div/div/div/div[1]/ul/li//div/div/article/div/div[1]/div[3]/ul/li[3]/b') %>% \n        html_text()\n    ) \n\n    \n##### Pulling FOR SALE houses #####\n######################################\n\nsale = \"https://www.zillow.com/slater-ia/?searchQueryState=%7B%22mapBounds%22%3A%7B%22north%22%3A41.930365556704984%2C%22east%22%3A-93.55027834838869%2C%22south%22%3A41.782563414617314%2C%22west%22%3A-93.76760165161134%7D%2C%22isMapVisible%22%3Atrue%2C%22filterState%22%3A%7B%22sort%22%3A%7B%22value%22%3A%22days%22%7D%2C%22ah%22%3A%7B%22value%22%3Atrue%7D%2C%22sche%22%3A%7B%22value%22%3Afalse%7D%2C%22schm%22%3A%7B%22value%22%3Afalse%7D%2C%22schh%22%3A%7B%22value%22%3Afalse%7D%2C%22schp%22%3A%7B%22value%22%3Afalse%7D%2C%22schr%22%3A%7B%22value%22%3Afalse%7D%2C%22schc%22%3A%7B%22value%22%3Afalse%7D%2C%22schu%22%3A%7B%22value%22%3Afalse%7D%2C%22land%22%3A%7B%22value%22%3Afalse%7D%7D%2C%22isListVisible%22%3Atrue%2C%22mapZoom%22%3A12%2C%22regionSelection%22%3A%5B%7B%22regionId%22%3A20522%2C%22regionType%22%3A6%7D%5D%2C%22pagination%22%3A%7B%7D%7D\"\n# read the html in the webpage\npg = read_html(sale)\n\n# get list of houses for sale that appears on the page\n# each property card is called an article when you inspect the webpage\nhousesale <- read_html(sale)%>%html_elements(\"article\")\n\n# create a dataframe for the FOR SALE houses\nres_pg <- tibble(\n  address= pg %>% html_nodes(xpath = \"/html/body/div[1]/div[5]/div/div/div[1]/div[1]/ul/li//div/div/article/div/div[1]/a/address\") %>% html_text(),\n  price = pg %>% html_nodes(xpath = '/html/body/div[1]/div[5]/div/div/div/div[1]/ul/li//div/div/article/div/div[1]/div/div/span') %>% html_text(),\n  bedrooms = pg %>% html_nodes(xpath = '/html/body/div[1]/div[5]/div/div/div/div[1]/ul/li//div/div/article/div/div[1]/div[3]/ul/li[1]/b') %>% \n    html_text(),\n  bathrooms = pg %>% html_nodes(xpath = '/html/body/div[1]/div[5]/div/div/div/div[1]/ul/li//div/div/article/div/div[1]/div[3]/ul/li[2]/b') %>% \n    html_text(),\n  sqft = pg %>% html_nodes(xpath = '/html/body/div[1]/div[5]/div/div/div/div[1]/ul/li//div/div/article/div/div[1]/div[3]/ul/li[3]/b') %>% \n    html_text()\n) \n\n# combine recently SOLD and FOR SALE houses in one data frame\nresults <- res_pg %>% bind_rows(res_ss)\nprint(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 x 5\n   address                             price    bedrooms bathrooms sqft \n   <chr>                               <chr>    <chr>    <chr>     <chr>\n 1 201 10th Ave, Slater, IA 50244      $309,000 3        2         924  \n 2 50287 210th Hwy, Slater, IA 50244   $475,000 4        2         2,147\n 3 1013 Redbud Dr, Slater, IA 50244    $429,900 4        3         1,884\n 4 506 8th Ave, Slater, IA 50244       $328,000 4        3         1,180\n 5 604 Story St, Slater, IA 50244      $200,000 3        1         1,359\n 6 611 1st Ave N, Slater, IA 50244     $265,000 4        2         1,116\n 7 101 Main St, Slater, IA 50244       $255,000 5        3         1,896\n 8 1015 Redbud Dr, Slater, IA 50244    $397,732 2        3         1,325\n 9 107 Main St, Slater, IA 50244       $242,500 4        2         1,515\n10 52898 Highway 210, Slater, IA 50244 $400,000 4        1.75      2,550\n11 604 Marshall St, Slater, IA 50244   $135,000 3        1         1,166\n12 104 N Benton St, Slater, IA 50244   $210,000 3        2         1,056\n```\n:::\n:::\n\n\nAt the beginning of the week, I helped my team assemble Excel spreadsheets with all the addresses for Slater, Grundy Center, Independence, and New Hampton. I was in charge of the Slater data and part of the Grundy Center and Independence data sets.\n\nWe needed to first gather the addresses for each city. Once they were gathered, we cleaned the data to remove any addresses that were obviously non-residential. We also narrowed the data down to just the Parcel ID and address. From there, we created the URLs to gather Google Street View images.\n\nWe used the following function in Excel to transform the street addresses into workable addresses for Google Street View:\n\n> =TRIM(SUBSTITUTE(cell,CHAR(160),\" \",\"+\"))\n\nThis function removes all spaces and replaces them with + signs.\n\nHere is the output of the cleaned Slater data:\n\n![](Slater%20urls.png){fig-align=\"center\"}\n\nNext week, I will get around the anti-web scraping protections Beacon and Vanguard have on their sites. Beacon and Vanguard have information on houses that aren't listed on Zillow, and more pictures aren't listed on Zillow or Google Street View.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}